#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sys
import argparse
import subprocess


def parse_args():
    starting_parser = argparse.ArgumentParser(description="This script performs bowtie/bowtie2-based alignment and processes the output using MetaPhlAn 2. REFDATA files are generated by the 'cook_the_reference' script")
    starting_parser.add_argument("-r", "--refdata", required=True,
                                 help="Referent DNA sequence REFDATA")
    starting_parser.add_argument("-s", "--sampledata", required=True,
                                 help="Input list containing two tab-delimited columns for colorspace or non-colorspace sequences and three for paired-end sequences: sample name and absolute path(s). May contain a header")
    starting_parser.add_argument("-m", "--mask", default=None,
                                 help="(Optional) Mask to be added to resulting files. Automtically apended by both REFDATA file names")
    starting_parser.add_argument("-t", "--threads", default=None, type=int,
                                 help="(Optional) Number of CPU cores to use, maximal by default")
    starting_parser.add_argument("-o", "--output", required=True,
                                 help="Output directory")
    return starting_parser.parse_args()


def is_path_exists(path):
    try:
        os.makedirs(path)
    except OSError:
        pass


def ends_with_slash(string):
    if string.endswith("/"):
        return string
    else:
        return str(string + "/")


def file_append(string, file_to_append):
    file = open(file_to_append, 'a+')
    file.write(string)
    file.close()


def external_route(input_direction_list, output_direction):
    process = subprocess.Popen(input_direction_list, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    (output, error) = process.communicate()
    process.wait()
    if error:
        print(error)
    if not output_direction:
        return output.decode("utf-8").replace('\r', '').replace('\n', '')
    else:
        file_append(output.decode("utf-8"), output_direction)


def filename_only(string):
    return str(".".join(string.rsplit("/", 1)[-1].split(".")[:-1]))


def file_to_list(file):
    file_buffer = open(file, 'rU')
    output_list = [j for j in [re.sub('[\r\n]', '', i) for i in file_buffer] if len(j) > 0]
    file_buffer.close()
    return output_list


def find_latest_changed_file(mask):
    return subprocess.getoutput("ls -1t -d " + mask + " | head -1")


def parse_namespace():
    namespace = parse_args()
    for file_name in [namespace.coverage, namespace.sampledata]:
        if not os.path.isfile(file_name):
            raise ValueError("Not found: '" + file_name + "'\nIf you're using Docker, please make sure you have mounted required volume with the '-v' flag.")
    default_threads = int(subprocess.getoutput("nproc"))
    if not namespace.threads or default_threads < namespace.threads:
        namespace.threads = default_threads
    return namespace.filter, namespace.coverage, namespace.sampledata, namespace.mask, str(namespace.threads), namespace.no_coverage, namespace.output


def run_metaphlan2(mapped_sampledata_file):
    for i in file_to_list(mapped_sampledata_file):
        try:
            sample_name, sample_path = i.split("\t")
        except ValueError:
            raise ValueError("Not found: " + i)
        external_route([], )


if __name__ == '__main__':
    filteringGenomeRefData, coverageGenomeRefData, sampleDataFileName, inputMask, cpuThreadsString, noCoverageExtractionBool, outputDir = parse_namespace()
    scriptDir = ends_with_slash(ends_with_slash(os.path.dirname(os.path.realpath(sys.argv[0]))))
    print("Performing single alignment for", sampleDataFileName, "on", coverageGenomeRefData)
    external_route(["python3", scriptDir + 'nBee.py', "-i", sampleDataFileName, "-r", coverageGenomeRefData, "-m", "_".join([inputMask, 'no', filename_only(filteringGenomeRefData), filename_only(coverageGenomeRefData)]), "-t", cpuThreadsString, "-n", "-o", outputDir], None)
    print("Completed processing:", " ".join([i for i in sys.argv if len(i) > 0]))
    mappedSampleDataFileName = re.sub('[\r\n]', '', find_latest_changed_file(outputDir + "Statistics/_mapped_reads_" + inputMask + "*.sampledata"))
    if len(mappedSampleDataFileName) == 0:
        raise ValueError("Only filtering alignment has been performed, but generated 'sampledata' could not be found!")
    print("Launching MetaPhlAn2 to process", mappedSampleDataFileName, "on", coverageGenomeRefData)



# SOLiD
# bowtie mpa_v20 -p 20 -v 3 -t -C --sam-nohead --sam-nosq sample1.nohuman.csfasta -S bt_out/sample1.sam
#
# python utils/metaphlan2.py bt_out/sample1.sam --input_type sam > metaphlan2_out/sample1.txt
#
# Merging results
# python utils/merge_metaphlan_tables.py metaphlan2_out/*.txt > metaphlan2_out/merged.txt
#
#
# Illumina
# python metaphlan2.py sample1_1.fastq,sample1_2.fastq --bowtie2out metagenome.bowtie2.bz2 --nproc 5 --input_type fastq > metaphlan2_out/sample1.txt
#
# python utils/merge_metaphlan_tables.py metaphlan2_out/*.txt > metaphlan2_out/merged.txt
